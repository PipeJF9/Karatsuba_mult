# Description: Multiplicación de números enteros grandes

def multiplicaDV(x: str,y: str, n):
    if p_es_pequeño(x,y):
        return str(int(x)*int(y))
    else:
        n = max(len(x),len(y))
        x = x.zfill(n)
        y = y.zfill(n)	
        if n % 2 != 0:
            n += 1
            x = x.zfill(n)
            y = y.zfill(n)
        mitad = n//2
        xizq = obtener_xizq(x,mitad)
        xder = obtener_xder(x,mitad)
        yizq = obtener_yizq(y,mitad)
        yder = obtener_yder(y,mitad)
        suma1 = suma(xizq,xder)
        suma2 = suma(yizq,yder)
        p = multiplicaDV(xizq,yizq,mitad)
        q = multiplicaDV(xder,yder,mitad)
        r = multiplicaDV(suma1,suma2,mitad)
        aux = resta(r,suma(p,q))
        aux = desplaza_izq(aux,mitad)
        p = desplaza_izq(p,n)
        z = suma(p,suma(q,aux))
        return z
        
def p_es_pequeño(x: str, y: str):  
    if len(x) < 8 or len(y) < 8:
        return True
    return False
    
def obtener_xizq(x:str, n: int):
    return x[:n]

def obtener_xder(x:str, n: int):
    return x[n:]

def obtener_yizq(y:str, n: int):
    return y[:n]

def obtener_yder(y:str, n: int):
    return y[n:]

def suma(a: str, b: str) -> str:
    # Inicializar las variables para almacenar el resultado y el acarreo inicial
    resultado = ""
    acarreo = 0

    # Rellenar las cadenas para que tengan la misma longitud
    longitud_max = max(len(a), len(b))
    a = a.zfill(longitud_max)
    b = b.zfill(longitud_max)

    # Recorrer las cadenas de derecha a izquierda y sumar los dígitos
    for i in range(longitud_max - 1, -1, -1):
        suma_digitos = int(a[i]) + int(b[i]) + acarreo
        resultado = str(suma_digitos % 10) + resultado  # Agregar el dígito al resultado
        acarreo = suma_digitos // 10  # Calcular el acarreo para la siguiente suma

    # Si hay un acarreo al final, agregarlo al resultado
    if acarreo:
        resultado = str(acarreo) + resultado

    return resultado

def resta(a: str, b: str) -> str:
    # Inicializar las variables para almacenar el resultado y el acarreo inicial
    resultado = ""
    acarreo = 0

    # Rellenar las cadenas para que tengan la misma longitud
    longitud_max = max(len(a), len(b))
    a = a.zfill(longitud_max)
    b = b.zfill(longitud_max)

    # Recorrer las cadenas de derecha a izquierda y restar los dígitos
    for i in range(longitud_max - 1, -1, -1):
        resta_digitos = int(a[i]) - int(b[i]) - acarreo
        if resta_digitos < 0:
            resta_digitos += 10
            acarreo = 1
        else:
            acarreo = 0
        resultado = str(resta_digitos) + resultado  # Agregar el dígito al resultado

    # Eliminar los ceros no significativos del resultado
    resultado = resultado.lstrip("0")

    return resultado

def desplaza_izq(a: str, n: int) -> str:
    return a + "0" * n

def multiplica(x: str,y: str, n):
    if x[0] == "-" and y[0] != "-":
        return "-" + multiplicaDV(x[1:],y,n).lstrip("0")
    elif x[0] != "-" and y[0] == "-":
        return "-" + multiplicaDV(x,y[1:],n).lstrip("0")
    elif x[0] == "-" and y[0] == "-":
        x = x[1:]
        y = y[1:]
        return multiplicaDV(x,y,n).lstrip("0")
    else:
        return multiplicaDV(x,y,n).lstrip("0")
    
    
if __name__ == "__main__":
    num1 = "47646577074632048143423646785745891253520954249100762211397764730987379659838822245023420924412321522096771010547885932089677654344154937121351722077637701822465135896896253640990211400510824393695044576070799271859200049100874118356341434258915998933803435297565048269707711312150095118814601284599115964371898972847305576559047744279979292322583918846390492322034422207918954529571370506600536146074094692401075162052418548994391241078713831156138798379899724246606057582059267105495906192892405627986517814400667474340339672204371525551887451524920788563485728881823836001255678152974318186192548168787336024614265144913536095050002553668754873523965449606933633478033060190465581448355511252932951488009336636635491145099442832170711493159329593456355336610262068781535098836705121560807540074448581443576530578476525221491247596885099769757321159588830430893382679189466079205468673494543665613258678119423300049805865048264029421592726892777843203826443331795369068726440527072505763784356240655951466527604080311881031930010784120443311432641564246914397119041152329944367211228994300727040962569035097480678890460059526654416282538827491985084990659298100926389751733018930523237773500558348609086188041729797475087946033439674094612217966977099035983450945748039835650056046085717955643319391629447471416971614896722384643201335241037995187749204586251988692324151375379963353899471612578171447904307973277554003706896390446774178741942376216031245592458410640069348154735530012810015325313183401001908469681958321304459448650394970199914555790158858521975539807658115979048116343240042529481778432098081641905633373311601445432734500743318340912141916950284520549657953847593425518589576755549353033126072903546862087897135386027334409638508666662196332444441672449010006601305730128090715658125063858262176488843127533337452082365402913545497596004677837392919727598451551053317684252356700726087812964084480529397557442969520811766881947082942780824962816472343766577390767973281691757111"
    num2 = "97219591638024875554090936173910716476187772456411044373510623647909602927115982284032883404207849649742678612584233468047160815272135894131869974695952832843615181323725089374729753252625094981341450867169741866161413564684300186604137721983621557784217492515632053477621231975325274784823845334888524868558190572203202283515421186936896420810551026287927121261777383672776434134144044514274206163978300585806469985116701303421499769327933340090860303701257844283398102345748943212484743194530729566606466216771872906471299740773873913474583188349925893549313863801076147745659941659487619150909460698750552943084657469779152660750739965462295366517124106321408292122831830533375886509344512338870307891473817216043426580208249834258378498837459313173356252629124796359712418342187658743196204268831612981871592710364894510444025295638818297169412357357710615463589006929934893808682167247666302810446291653301215874639908854615831652024287843980311846183530760262368798557520692154125105779955459452233775588380483880190791979353106847182303074057646616180295032875638944212005718068604776859068662860369529894296056721474482700137682087439288435593034064269342851516114595985256893319976484562034651570437992292999034379271543070872400181694345014055762036417730896297143600063737183514130696619031646238980349247082290487163100457945597532197688316602843118098767891148914790868227909498602515693507212814624012175510832928308143615463696387017284823856067821018617703001487775825280302419180388991385252936950591641392683367494310221146297353393971110093624316544227134301585757267230291218837985109741352098405718125977374575030564851254287128441863905679718568110994432200968353475116661543102165479882229309243170378756207885340510661012527606166840089118743186554488429691748697697216382992698286084270382931761493797056868893475377030366071726834275803319650808037988888045988142837392019226871737358803485010014972226223821790239887969177525882926788426885674498549946813043644112369576651"
    mult1 = multiplica(num1,num2,0)
    print(mult1)

    